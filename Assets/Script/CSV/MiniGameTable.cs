// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class MiniGameTable
{
    [System.Serializable]
	public class Row
	{
		public string ID;
		public List<string> FindItem;
		public string MapName;
		public string Reward;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
            row.FindItem = new List<string>(grid[i][2].Split(","[0]));
			row.ID = grid[i][0];
			row.MapName = grid[i][1];
			row.Reward = grid[i][3];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_ID(string find)
	{
		return rowList.Find(x => x.ID == find);
	}
	public List<Row> FindAll_ID(string find)
	{
		return rowList.FindAll(x => x.ID == find);
	}

	public Row Find_FindItemInArray(string find)
	{
        return rowList.Find(x => x.FindItem[(x.FindItem.IndexOf(find))] == find);
  	}

    public Row Find_MapName(string find)
    {
		return rowList.Find(x => x.MapName == find);
	}
	public List<Row> FindAll_MapName(string find)
	{
		return rowList.FindAll(x => x.MapName == find);
	}
	//public Row Find_FindItem(string find)
	//{
	//	return rowList.Find(x => x.FindItem == find);
	//}
	//public List<Row> FindAll_FindItem(string find)
	//{
	//	return rowList.FindAll(x => x.FindItem == find);
	//}
	public Row Find_Reward(string find)
	{
		return rowList.Find(x => x.Reward == find);
	}
	public List<Row> FindAll_Reward(string find)
	{
		return rowList.FindAll(x => x.Reward == find);
	}

}