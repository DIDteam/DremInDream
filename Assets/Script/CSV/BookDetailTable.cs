// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class BookDetailTable
{
    [System.Serializable]
    public class Row
	{
		public string IDMini;
		public string Mapname;
		public string IDItem;
		public string Detail;

	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.IDMini = grid[i][0];
			row.Mapname = grid[i][1];
			row.IDItem = grid[i][2];
			row.Detail = grid[i][3];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_IDMini(string find)
	{
		return rowList.Find(x => x.IDMini == find);
	}
	public List<Row> FindAll_IDMini(string find)
	{
		return rowList.FindAll(x => x.IDMini == find);
	}
	public Row Find_Mapname(string find)
	{
		return rowList.Find(x => x.Mapname == find);
	}
	public List<Row> FindAll_Mapname(string find)
	{
		return rowList.FindAll(x => x.Mapname == find);
	}
	public Row Find_IDItem(string find)
	{
		return rowList.Find(x => x.IDItem == find);
	}
	public List<Row> FindAll_IDItem(string find)
	{
		return rowList.FindAll(x => x.IDItem == find);
	}
	public Row Find_Detail(string find)
	{
		return rowList.Find(x => x.Detail == find);
	}
	public List<Row> FindAll_Detail(string find)
	{
		return rowList.FindAll(x => x.Detail == find);
	}

}